#!/usr/bin/env node

var _               = require('../lib/underscore');
var program         = require('commander');
var fs              = require('fs');
var util            = require('util');
var inputFormats    = require('../lib/input-formats');
var outputFormats   = require('../lib/output-formats');
var globalFunctions = require('../lib/functions');
var Template        = require('../lib/template');
var Module          = require('module');
var VM              = require('vm');
var JSONSelect      = null; // lazy load of require('JSONSelect');
var coffee          = null; // lazy load of require('coffee-script');

var version;
try {
  version = require('../package.json').version;
} catch(e) {
  console.error("Error parsing 'package.json'.  Installation is corrupted: ", e.stack);
  version = 'unknown';
}

program.version(version);

function addStandardOptions(command) {
  command
    .option('-i, --in <filename>', 'The data file to load.  If not specified, defaults to stdin.')
    .option('--infmt <format>', 'The format of the input data. See \'help formats\'')
    .option('-o, --out <filename>', 'The output file.  If not specified, defaults to stdout.')
    .option('--outfmt <format>', 'The format of the output data. See \'help formats\'')
    .option('-d, --data <JSON>', 'Input data provided in lieu of a filename')
    .option('-n, --nodata', "Input data is 'undefined'")
    .option('-q, --quiet', "Suppress normal output.  'console.log' will still trigger output.")
    .option('--strict', "Use strict JSON parsing instead of more lax 'eval' syntax.  To avoid security concerns, use this with ANY data from an external source.")
    .option('--color', "Colorize output")
    .option('--text', "Parse data as text instead of JSON. Sets input and output formats to 'text'")
    .option('--trace', "Print stack traces when things go wrong")
}

program.defaultInputFormat = 'lax';
program.defaultOutputFormat = 'json';

program.defaults = {
  printUndefined: true,
};

function addExpressionOptions(command) {
  command.option('--coffee', "Interpret expression as CoffeeScript. See http://coffeescript.org/")
  command.option('--js', "Interpret expression as JavaScript. (default is \"auto\")");
}


addStandardOptions(program);
addExpressionOptions(program);

var Command = program.Command;

Command.prototype.commandHelp = function () {
  var cmds = _(program.commands)
    .reject(function (cmd) { return cmd.hidden; })
    .map(function(cmd){
      var args = _(cmd.args)
        .map(function(arg){
          return arg.required
            ? '<' + arg.name.replace('expression', 'exp') + '>'
            : (arg.name == 'command' ? '[' + arg.name + ']' : '');
        })
        .join(' ');
        // DDOPSON-2012-10-22 - Commander.js changed the property from 'name' to '_name' somewhere between 0.6.1 and 1.0.5.  We use (cmd.name || cmd._name) to work with both versions.  Really, I hacked Commander so much I should just fork it and have my own version.
      return [(cmd.name || cmd._name) + ' ' + args, cmd.description()];
    });

  var maxlen = _.max(_.map(cmds, function (cmd) { return cmd[0].length; }));

  return _.map(cmds, function (cmd) {
    return _.sprintf('%-' + maxlen + 's %s', cmd[0], cmd[1]);
  }).join('\n');
};

Command.prototype.examplesHelp = function () {
  var examples = this.examples;
  var format = this.defaultOutputFormat ? this.defaultOutputFormat : program.defaultOutputFormat;
  var formatter = outputFormats[format];
  if (!_.isArray(examples)) {
    examples = [examples];
  }
  return _.map(examples, function (example) {
    if(example && example.cmd && example.result) {
      var cmd = example.cmd;
      var result = example.result;
      var fmt = example.format ? outputFormats[example.format] : formatter;
      return (cmd.match(/underscore/) ? '' : 'underscore ') + cmd + "\n" + fmt.stringify(result).replace(/^/gm, "# ") + "\n";
    }
    return _.map(example, function (result, cmd) {
      try {
        return (cmd.match(/underscore/) ? '' : 'underscore ') + cmd + "\n" + formatter.stringify(result).replace(/^/gm, "# ") + "\n";
      } catch (e) {
        console.log("ERROR with '%s': %s", cmd, e.stack);
        process.exit(-1);
      }
    }).join("\n");
  }).join("\n");
};

Command.prototype.notesHelp = function () {
  var notes = this.notes;
  if (_.isArray(notes)) {
    return notes.join("\n");
  } else if (notes) {
    return notes;
  } else if (this._description) {
    return this._description;
  } else {
    return '';
  }
}

Command.prototype.usage = function(str){
  var opts = _.reject(program.options, function (o) {
    return o.flags.match(/--in\b|--data|--nodata|--version/);
  });
  var optsStr = '[--in <filename>|--data <JSON>|--nodata] ' + 
    _.compact(opts.map(function (o) {
      return '[' + o.flags.replace(/.*, */, '') + ']';
    })).join(' ');

  if (this === program) {
    var args = [];
  } else {
    var args = this.args.map(function(arg){
      return arg.required
        ? '<' + arg.name + '>'
        : '[' + arg.name + ']';
    });
  }

  if (this.commands.length > 0) {
    args.push('<command>');
  }

  return args.join(' ') + ' ' + optsStr;
};

Command.prototype.fullName = function () {
  // DDOPSON-2012-10-22 - Commander.js changed the property from 'name' to '_name' somewhere between 0.6.1 and 1.0.5.  We use (cmd.name || cmd._name) to work with both versions.  Really, I hacked Commander so much I should just fork it and have my own version.
  if (this.parent) {
    return this.parent.fullName() + ' ' + (this.name || this._name);
  } else {
    return (this.name || this._name);
  }
};

Command.prototype.stylize = function (str, style) {
  return str;
};

function log_warn() {
  arguments[0] = 'Warning: ' + arguments[0];
  console.error.apply(console, arguments);
}

function red (string) {
  return "\033[34m" + string + "\033[0m";
}

function bold (string) {
  // bold white.  see https://github.com/gf3/coloured/blob/master/lib/coloured.js
  return "\033[1;37m" + string + "\033[0m";
}

function stylize (str, style) {
  switch(style) {
    case 'expr':  return bold(str);
    case 'error': return red(str);
    default:      return str;
  }
}

Command.prototype.helpInformation = function () {

  var help = [
      ''
    , this.stylize('  Usage: ', 'header')
    , '    ' + this.fullName() + ' ' + this.usage()
    , ''
    , '' + _.indent(this.notesHelp(), '  ')
  ];

  help = help.concat(this.commands.length == 0 ? [] : [
    , this.stylize('  Commands:', 'header')
    , ''
    , '' + _.indent(this.commandHelp(), '    ')
    , ''
  ]);

  help = help.concat([
    , this.stylize('  Options:', 'header')
    , ''
    , '' + _.indent(this.optionHelp(), '    ')
    , ''
  ]);

  help = help.concat([
    , this.stylize('  Examples:', 'header')
    , ''
    , '' + _.indent(this.examplesHelp(), '    ')
    , ''
  ]);

  return help.join('\n');
};

Command.prototype.command = function (args) {
  if (_.isString(args)) {
    args = { name: args };
  }

  var args2 = args.name.split(/ +/);
  var cmd = new Command(args2.shift());
  this.commands.push(cmd);
  cmd.parseExpectedArgs(args2);
  cmd.parent = this;

  for(var key in args) {
    if(args.hasOwnProperty(key)) {
      if(key === 'name' || key === 'options') {
        continue;
      } else if(typeof cmd[key] === 'function') {
        cmd[key](args[key]);
      } else {
        cmd[key] = args[key];
      }
    }
  }

  return cmd;
};

function printHelp() {
  if (arguments.length > 0) {
    console.error.apply(console.error, arguments);
    console.error(program.helpInformation());
    process.exit(1);
  } else {
    console.log(program.helpInformation());
    process.exit(0);
  }
}

program.examples = {
    "map --data '[1, 2, 3, 4]' 'value+1'"                     :  [2, 3, 4, 5],
    "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' '_.max(value)'":  [4, 8],
    "echo '{\"foo\":1, \"bar\":2}' | underscore map -q 'console.log(\"key = \", key)'": "key = foo\nkey = bar",
    "pluck --data \"[{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}]\" name": ["moe", "larry", "curly"],
    "keys --data '{name : \"larry\", age : 50}'"              : ["name", "age"],
    "reduce --data '[1, 2, 3, 4]' 'total+value'"              : 10,
};


var commands = {
  help: {
    name: 'help [command]',
    description: "Print more detailed help and examples for a specific command",
    action: function(command) {
      if(! command) {
        printHelp();
      } else {
        var commandObj = _.find(program.commands, function (obj) { return obj.name==command });
        if(commandObj) {
          console.log(commandObj.helpInformation());
          process.exit(0);
        } else {
          printHelp("Unknown command: " + command);
        }
      }
    }
  },

  examples: {
    description: "Print an exhaustive list of ALL examples",
    hidden: true,
    action: function() {
      console.log(_.compact(_.map(program.commands, function (cmd) {
        return cmd.examplesHelp();
      })).join('\n'));
      process.exit(0);
    }
  },

  type: {
    description: 'Print the type of the input data: {object, array, number, string, boolean, null, undefined}',
    fn: function (data) {
      if (_.isArray(data)) {
        return 'array';
      } else if (_.isObject(data)) {
        return 'object';
      } else if (_.isString(data)) {
        return 'string';
      } else if (_.isNumber(data)) {
        return 'number';
      } else if (_.isBoolean(data)) {
        return 'boolean';
      } else if (_.isNull(data)) {
        return 'null';
      } else if (_.isUndefined(data)) {
        return 'undefined';
      } else {
        return 'UNKNOWN? (this is a bug; please report it to https://github.com/ddopson/underscore-cli/issues)';
      }
    },
    examples: {
      'type --data \'[]\''        : 'array',
      'type --data \'{}\''        : 'object',
      'type --data 99'            : 'number',
      'type --data \'99\''        : 'number',
      'type --data \'"99"\''      : 'string',
      'type --data \'false\''     : 'boolean',
      'type --data \'null\''      : 'null',
      'type --data \'undefined\'' : 'undefined',
      'type --nodata'             : 'undefined',
    }
  },

  print: {
    name: 'print',
    description: "Output the data without any transformations. Can be used to pretty-print JSON data.",
    fn: function (data) { return data; },
    examples: [
      { cmd: "print --data '[1, 2, 3, 4]'", result:  [1, 2, 3, 4] },
      { cmd: "cat example-data/simple.json | underscore print", result: {foo: 'bar', baz: [1, 2, 3]}},
      { cmd: "echo 'this is a sentence' | underscore print --text",        result: 'this is a sentence', format: 'text'}
    ]
  },

  pretty: {
    description: "Output the data without any transformations. Can be used to pretty-print JSON data. (defaults output format to 'pretty')",
    fn: function (data) { return data; },
    defaultOutputFormat: 'pretty',
    examples: []
  },

  run: {
    name: 'run <expression>',
    description: "Runs arbitrary JS code. Use for CLI Javascripting.",
    notes: ["Runs arbitrary JS code.  Note that globals like '_' and 'print' will still be defined."],
    expr: ['data'], 
    fn: function (data, userFn) {
      // 'data' is likely to be undefined
      return userFn(data);
    },
    examples: [
      { cmd: "run 'print(\"myString\")'", result: "myString", format: 'text' }
    ],
    defaults: {
      nodata: true,
      printUndefined: false
    }
  },

  process: {
    name: 'process <expression>',
    description: "Run arbitrary JS against the input data.  Expression Args: (data)",
    expr: ['data'],
    fn: function (data, userFn) {
      return userFn(data);
    },
    examples: [
      { cmd: "process --data '\"my-string\"' 'camelize(data)'", result: "myString"},
      { cmd: "process --data '[1, 2, 3, 4]' 'max(data)'",       result: 4},
    ]
  },

  extract: {
    name: 'extract <field>',
    description: "Extract a field from the input data.  Also supports field1.field2.field3",
    fn: function (data, field) {
      var fields = field.split('.');
      var sofar = '';
      _.map(fields, function (f) {
        if (data[f] !== undefined) {
          data = data[f];
          sofar = sofar + '.' + f;
        } else {
          throw new Error(util.format("data%s does not contain field '%s'", sofar, f));
        }
      });
      return data;
    },
    examples: {
      "extract field1.field2.field3 --data '{field1: {field2: { field3: 1234 }}}'": 1234
    }
  },

  map: {
    name: 'map <expression>',
    description: "Map each value from a list/object through a transformation expression whose arguments are (value, key, list).'",
    expr: ["value", "key", "list"],
    fn: _.map,
    examples: {
      "map --data '[1, 2, 3, 4]' 'value+1'":  [2, 3, 4, 5],
      "map --data '{\"a\": 1, \"b\": 2}' 'key === \"a\" ? value+1 : value-1'":  [2, 1],
      "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' 'value[1]/value[0]'":  [4, 4],
      "map --data '{\"a\": [1, 4], \"b\": [2, 8]}' 'max(value)'":  [4, 8],
    }
  },

  reduce: {
    name: 'reduce <expression> [initial_value]',
    description: "Boil a list down to a single value by successively combining each element with a running total.  Expression args: (total, value, key, list)",
    expr: ['total', 'value', 'key', 'list'],
    fn: function (data, userFn, initial) {
      if (initial) {
        return _.reduce(data, userFn, parseInput(initial, initial));
      } else {
        return _.reduce(data, userFn); // total == first value
      }
    },
    examples: {
      "reduce --data '[1, 2, 3, 4]' 'total+value'":        10,
      "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value'":   '1234',
      "reduce --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": '01234',
    }
  },

  reduceRight: {
    name: 'reduceRight <expression> [initial_value]',
    description: "Right-associative version of reduce. ie, 1 + (2 + (3 + 4)). Expression args: (total, value, key, list)",
    expr: ['total', 'value', 'key', 'list'],
    fn: function (data, userFn, initial) {
      if (initial) {
        return _.reduceRight(data, userFn, parseInput(initial, 'initial_value'));
      } else {
        return _.reduceRight(data, userFn); // total == first value
      }
    },
    examples: {
      "reduceRight --data '[1, 2, 3, 4]' 'total+value'": 10,
      "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value'": '4321',
      "reduceRight --data '[1, 2, 3, 4]' 'total+\"\"+value' 0": '04321',
    }
  },

  select: {
    name: 'select <jselexp>',
    description: "Run a 'JSON Selector' query against the input data. See jsonselect.org.",
    fn: function (data, sel) {
      if (! JSONSelect) {
        JSONSelect = require('JSONSelect');
      }
      return JSONSelect.match(sel, data);
    },
    examples: {
      "underscore -i example-data/earthporn.json select '.children .title'":
      [ 'Eating breakfast in the Norwegian woods! Captured with my phone [2448x3264] ',
        'The Rugged Beauty of Zion NP Utah at Sunrise [OC] (1924x2579)',
        'Falls and island near Valdez, AK on a rainy day [4200 x 3000]',
        'Havasu Falls, Havasupai, Arizona.  This is a personal photograph from a trip I took in 2006 before the flood of 2008 [960x1280]',
        'Victoria Amazonica in Brazil, SC [2448X3264]',
        'A dreamy haze flows over the Alaska Range on the Castner Glacier [4948 x 3280]' ]
    }
  },

  find: {
    name: 'find <expression>',
    description: "Return the first value for which the expression Return a truish value.  Expression args: (value, key, list)",
    expr: ['value', 'key', 'list'],
    fn: _.find,
    examples: {
      "find --data '[1, 2, 3, 4]' 'value > 2'": 3,
      "find --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": 2,
    }
  },

  filter: {
    name: 'filter <expression>',
    description: "Return an array of all values that make the expression true.  Expression args: (value, key, list)",
    expr: ['value', 'key', 'list'],
    fn: _.filter,
    examples: {
      "filter --data '[1, 2, 3, 4]' 'value > 2'": [3, 4],
      "filter --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [2],
    }
  },

  reject: {
    name: 'reject <expression>',
    description: "Return an array of all values that make the expression false.  Expression args: (value, key, list)",
    expr: ['value', 'key', 'list'],
    fn: _.reject,
    examples: {
      "reject --data '[1, 2, 3, 4]' 'value > 2'": [1, 2],
      "reject --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": [1],
    }
  },

  flatten: {
    description: "Flattens a nested array (the nesting can be to any depth). If you pass '--shallow', the array will only be flattened a single level.",
    fn: function (data) { return _.flatten(data, program.args[0].shallow ? true : false); },
    examples: {
      "flatten --data '[1, [2, [3]], 4]'":            [1, 2, 3, 4],
      "flatten --shallow --data '[1, [2, [3]], 4]'":  [1, 2, [3], 4]
    },
    options: [
      ['--shallow', 'Only flatten array by a single level']
    ]
  },

  pluck: {
    name: 'pluck <key>',
    description: "Extract a single property from a list of objects",
    fn: _.pluck,
    examples: {
      "pluck --data \"[{name : 'moe', age : 40}, {name : 'larry', age : 50}, {name : 'curly', age : 60}]\" name": ["moe", "larry", "curly"]
    }
  },

  keys: {
    description: "Retrieve all the names of an object's properties.",
    fn: _.keys,
    examples: {
      "keys --data '{name : \"larry\", age : 50}'": ["name", "age"],
      "keys --data '[8, 9, 10]'": ['0', '1', '2'],
    }
  },

  values: {
    description: "Retrieve all the values of an object's properties.",
    fn: _.values,
    examples: {
      "values --data '{name : \"larry\", age : 50}'": ["larry", 50],
      "values --data '[8, 9, 10]'": [8, 9, 10],
    }
  },

  extend: {
    name: 'extend <object>',
    aliases: ['override'],
    description: "Override properties in the input data.",
    fn: function (data, data2) {
      data2 = parseInput(data2, 'override_data');
      return _.extend(data, data2);
    },
    examples: {
      "extend --data '{name : \"larry\", age : 50}' '{age: 65}'": {name: "larry", age: 65}
    }
  },

  defaults: {
    name: 'defaults <object>',
    description: "Fill in missing properties in the input data.",
    fn: function (data, data2) {
      data2 = parseInput(data2, 'default_data');
      return _.defaults(data, data2);
    },
    examples: {
      "defaults --data '{name : \"larry\", age : 50}' '{name: \"unknown\", salary: 100}'": {name: "larry", age: 50, salary: 100}
    }
  },

  any: {
    name: 'any <expression>',
    description: "Return 'true' if any of the values in the input make the expression true.  Expression args: (value, key, list)",
    expr: ['value', 'key', 'list'],
    fn: _.any,
    examples: {
      "any --data '[1, 2, 3, 4]' 'value > 5'": false,
      "any --data '[1, 2, 3, 4]' 'value > 2'": true,
      "any --data '[1, 2, 3, 4]' 'value > 0'": true,
      "any --data '{foo: 1, bar: 2}' 'key == \"bar\"'": true,
    }
  },

  all: {
    name: 'all <expression>',
    description: "Return 'true' if all values in the input make the expression true.  Expression args: (value, key, list)",
    expr: ['value', 'key', 'list'],
    fn: _.all,
    examples: {
      "all --data '[1, 2, 3, 4]' 'value > 5'": false,
      "all --data '[1, 2, 3, 4]' 'value > 2'": false,
      "all --data '[1, 2, 3, 4]' 'value > 0'": true,
      "all --data '{\"foo\": 1, \"bar\": 2}' 'key == \"bar\"'": false,
    }
  },

  isObject: {
    description: "Return 'true' if the input data is an object with named properties",
    fn: function (data) {
      if (program.args[0].arraysAreObjects) {
        return _.isObject(data);
      } else {
        return _.isObject(data) && ! _.isArray(data);
      }
    },
    examples: {
      "isObject --data '{name : \"larry\", age : 50}'": true,
      "isObject --data '[]'": false,
      "isObject --data '[]' --arrays-are-objects": true
    },
    options: [
      ['--arrays-are-objects', 'Restore the default underscore.js behavior where Array() is a type of object']
    ]
  },

  isArray: {
    name: 'isArray',
    description: "Return 'true' if the input data is an array",
    fn: _.isArray,
    examples: {
      "isArray --data '{name : \"larry\", age : 50}'": false,
      "isArray --data '[]'": true
    }
  },

  isString: {
    name: 'isString',
    description: "Return 'true' if the input data is a string",
    fn: _.isString,
    examples: {
      "isString --data '{}'"      : false,
      "isString --data '[]'"      : false,
      "isString --data \"'foo'\"" : true
    }
  },

  isNumber: {
    description: "Return 'true' if the input data is a number",
    fn: _.isNumber,
    examples: {
      "isNumber --data '{}'"    : false,
      "isNumber --data '[]'"    : false,
      "isNumber --data \"'9'\"" : false,
      "isNumber --data \"9\""   : true,
    }
  },

  isBoolean: {
    description: "Return 'true' if the input data is a boolean, ie {true, false}",
    fn: _.isBoolean,
    examples: {
      "isBoolean --data '0'"     : false,
      "isBoolean --data '1'"     : false,
      "isBoolean --data 'true'"  : true,
      "isBoolean --data 'false'" : true,
    }
  },

  isNull: {
    description: "Return 'true' if the input data is the 'null' value",
    fn: _.isNull,
    examples: {
      "isNull --data '0'"         : false,
      "isNull --data '1'"         : false,
      "isNull --data 'false'"     : false,
      "isNull --data 'null'"      : true,
      "isNull --data 'undefined'" : false,
    }
  },

  isUndefined: {
    description: "Return 'true' if the input data is undefined",
    fn: _.isUndefined,
    examples: {
      "isUndefined --data '0'"         : false,
      "isUndefined --data '1'"         : false,
      "isUndefined --data 'false'"     : false,
      "isUndefined --data 'null'"      : false,
      "isUndefined --data 'undefined'" : true,
    }
  },

  template: {
    name: 'template <filename>',
    description: "Process an underscore template and print the results. See 'help template'",
    notes: [
      'Process an underscore template and print the results.  Template syntax is similar to the ERB templates used in Ruby:',
      "Variables can be interpolated with <%= ... %>, or drop the '=' character to run code without interpolating the result.",
      'Note that functions like _.map are available inside the template and loops can span multiple interpolation boundaries.',
      'For creating XML/HTML, I reccommend that you consider HAML/JADE templates.  For general text, _.template is as good as it gets',
      '',
      'See http://documentcloud.github.com/underscore/#template.'
    ],
    fn: function (data, filename) {
      try {
        var text = fs.readFileSync(filename, 'utf8');
      } catch (e) {
        console.error("Error reading template file '%s': %s", filename, program.trace ? e.stack : e.message);
        process.exit(-1);
      }

      try {
        var output;
        var compiledTemplate = Template.compile(filename, text);
        if(data) {
          data = _.defaults(data, globalFunctions);
          output = compiledTemplate(data);
        } else {
          output = compiledTemplate.source;
        }
      } catch (e) {
        console.error("Error processing template file '%s': %s", filename, program.trace ? e.stack : e.message);
        process.exit(-1);
      }

      return output;
    },
    defaultOutputFormat: 'text',
    examples: {
      "template --data '{name: \"moe\"}' example-data/trivial.template": "hello moe",
      "template --nodata example-data/trivial.template": [
        "module.exports = function(obj){var __p='', print=function(){__p+=Array.prototype.join.call(arguments, '')};with(obj||{}){__p+='hello '+( name )+'\\n'+",
        "'';} return __p; }"
      ]
    }
  }
};


// Object Stuff
//functions - does this make sense?  point it at a module with 'eval/require'

// other
// range
// indexOf
// lastIndexOf
// zip
// [mine] zipObject
// uniq
// intersection
// [skip] difference
// union
// without
// [mine] withoutKeys
// compact
// map --compact
// last
// first

function defineCommand (opts, name) {
  if (! opts.name) {
    opts.name = name;
  }

  var cmd = program.command(opts);

  if (opts.fn) {
    addStandardOptions(cmd);
    cmd.action(function(a, b, c, d, e) {
      program.command = cmd;
      if (opts.expr) {
        var a = getUserFn(a, opts.expr);
      }
      if(opts.defaults) {
        _.defaults(program, opts.defaults);
      }
      processData(function (data) {
        return opts.fn(data, a, b, c, d, e);
      }, opts);
    });
  }

  if (opts.expr) {
    addExpressionOptions(cmd);
  }

  if (opts.action) {
    cmd.action(opts.action);
  }

  if (opts.options) {
    opts.options.map(function (el) {
      cmd.option.apply(cmd, el);
    });
  }
}

/*program.command({
  name: '*',
  action: function (cmd) {
    printHelp("Unknown command: '%s'", cmd);
  },
  hidden: true
});*/

function main () {
  var argv = process.argv;
  
  program.parse(argv);
  if (program.args.length === 0) {
    _.map(commands, defineCommand);
    printHelp();
  } else {
    var arg0 = program.args[0];
    // DDOPSON-2012-09 - 'template' needing all commands defined is a hacky workaround for README.md's benefit
    if (arg0 === 'help' || arg0 === 'examples' || arg0 === 'template') {
      _.map(commands, defineCommand);
    } else if (commands[arg0]) {
      defineCommand(commands[arg0], arg0);
    }
    program.on('*', function (cmd) {
      printHelp("Unknown command: '%s'", cmd);
    });
    program.parse(argv);
  }
}

function getUserFn_js(expression, args, type) {
  if (!type)
    type = 'JavaScript'
  var code = expression;
  try {
    var script = VM.createScript(code);
    var mod = new Module(process.cwd(), module);
    mod.paths = Module._nodeModulePaths(process.cwd());
    var _context = _.extend(globalFunctions, {
      require: mod.require.bind(mod)
    });
    var context = VM.createContext(globalFunctions);
  } catch (e) {
    return util.format("Error while compiling user expression '%s' as %s: %s", stylize(code, 'expr'), type, stylize(program.trace ? e.stack : e.message, 'error'));
  }

  return function () {
    try {
      for(var i = 0; i < args.length; i++) {
        var name = args[i];
        context[name] = arguments[i];
      }
      var ret = script.runInContext(context);
      return ret;
    } catch (e) {
      console.error("Error while evaluating user expression '%s' as %s: %s", stylize(code, 'expr'), type, stylize(program.trace ? e.stack : e.message, 'error'));
      process.exit(-1);
    }
  };
}

function getUserFn_coffee(expression, args) {
  var code = expression;
  if (! coffee) {
    coffee = require('coffee-script');
  }
  try {
    var js = coffee.compile(code, {filename: 'expression', bare: true});
  } catch (e) {
    return util.format("Error while compiling user expression '%s' as CoffeeScript: %s", stylize(code, 'expr'), stylize(program.trace ? e.stack : e.message, 'error'));
  }
  return getUserFn_js(js, args, 'CoffeeScript')
}


function getUserFn(expression, args) {
  var js, coffee;
  if (program.coffee) {
    coffee = getUserFn_coffee(expression, args);
  } else if (program.js) {
    js = getUserFn_js(expression, args);
  } else {
    js = getUserFn_js(expression, args);
    if (typeof js !== 'function') {
      log_warn("Parsing user expression '%s' as CoffeeScript.  Use '--coffee' to be more explicit.", stylize(expression, 'expr'));
      coffee = getUserFn_coffee(expression, args);
    }
  }

  if (typeof js === 'function') {
    return js;
  } else if (typeof coffee === 'function') {
    return coffee;
  } else {
    if (js) {
      console.error(js);
    }
    if (coffee) {
      console.error(coffee);
    }
    process.exit(-1);
  }
}

function processData(fn) {  
  inputData(function(data) {
    try {
      var output = fn(data);
    } catch (e) {
      console.error("Error while processing data: %s", e.stack);
      process.exit(-1);
    }
    outputData(output);
    process.exit(0);
  });
}

function parseInput(text, source) {
  if (text === undefined) {
    return undefined;
  }
  var format;
  var command = program.command;
  if (program.infmt) {
    format = program.infmt;
  } else if (program.text) {
    format = 'text';
  } else if (program.strict) {
    format = 'strict';
  } else if (command.defaultInputFormat) {
    format = command.defaultInputFormat;
  } else {
    format = program.defaultInputFormat;
  }

  if (! inputFormats[format]) {
    var valid_formats = "['" + _.keys(inputFormats).join("', '") + "']";
    console.error("Unrecognized input format: '%s'.  See 'help formats', or select from %s", format, valid_formats);
    process.exit(-1);
  }

  var formatObj = inputFormats[format];

  if(text.length == 0) {
    console.error("Error while parsing %s: File is empty!", source);
    process.exit(-1);
  }

  try {
    return formatObj.parse(text);
  } catch (e) {
    console.error("Error while parsing %s in mode '%s': %s", source, format, program.trace ? e.stack : e.message);
    process.exit(-1);
  }
}

function inputData(cb) {
  var text, data;
  if (program.data) {
    text = program.data;
    data = parseInput(text, "'--data' argument");
    cb(data);
  } else if (program.nodata) {
    cb(undefined);
  } else if (program.in) {
    try {
      text = fs.readFileSync(program.in);
    } catch (e) {
      console.error("Error while reading input file '%s': %s", program.in, program.trace ? e.stack : e.message);
      process.exit(-1);
    }
    var data = parseInput(text, "'" + program.in + "'");
    cb(data);
  } else {
    process.stdin.resume();
    text = "";
    process.stdin.setEncoding('utf8');
    process.stdin.on('data', function (d) {
      text += d;
    });
    process.stdin.on('end', function () {
      data = parseInput(text, 'STDIN');
      cb(data);
    });
  }
}

function outputData(data) {
  if(!program.quiet) {

    var format;
    var command = program.command;
    if (program.outfmt) {
      format = program.outfmt;
    } else if (program.text) {
      format = 'text';
    } else if (command.defaultOutputFormat) {
      format = command.defaultOutputFormat;
    } else {
      format = program.defaultOutputFormat;
    }

    if (! outputFormats[format]) {
      var valid_formats = "['" + _.keys(outputFormats).join("', '") + "']";
      console.error("Unrecognized output format: '%s'.  See 'help formats', or select from %s", format, valid_formats);
      process.exit(-1);
    }

    var formatter = outputFormats[format].stringify;

    if (program.color && typeof formatter.withConfig == 'function') {
      formatter = formatter.withConfig({color: true});
    }
    
    var output;
    try {
      if (data === undefined && ! program.printUndefined) {
        return;
      } else {
        output = formatter(data);
      }
    } catch (e) {
      console.error("Error formatting output data in mode '%s': %s", format, program.trace ? e.stack : e.message);
      process.exit(-1);
    }

    if (program.out) {
      try {
        fs.writeFileSync(program.out, output, 'utf8');
      } catch (e) {
        console.error("Error while writing to output file '%s': ", program.out, program.trace ? e.stack : e.message);
        process.exit(-1);
      }
    } else {
      process.stdout.write(output);
      // Ensure we end w/ a newline
      if (!(typeof output == 'string' && output.match(/\n$/))) {
        console.log();
      }
    }
  }
}

module.exports = program;

if(module.parent === null) {
  main();
}

